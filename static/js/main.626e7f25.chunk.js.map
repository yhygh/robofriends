{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","console","log","map","robot","index","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2TAeeA,G,MAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,WACpD,6BACE,4BAAKJ,GACL,2BAAIC,OCgCGI,EArCE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OASlB,OAJAC,QAAQC,IAAR,gBAKC,oCAEKF,EAAOG,KAAK,SAACC,EAAOC,GAAR,OACZ,kBAAC,EAAD,CACCC,IAAKF,EAAMX,GACXA,GAAIW,EAAMX,GACVC,KAAMU,EAAMV,KACZC,MAAOS,EAAMT,aCLPY,EAdG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAEjC,OADAR,QAAQC,IAAI,iBAEX,yBAAKN,UAAU,OACd,2BACCA,UAAU,SACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCCI,EATA,SAACC,GAEf,OACC,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCkBKC,E,kDArBd,WAAYN,GAAQ,IAAD,8BAClB,cAAMA,IACDO,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAIG,KAAKJ,MAAMC,SACP,yDAGDG,KAAKX,MAAMK,a,GAlBOQ,aCiCZC,E,kDAhCd,aAAe,IAAD,8BACb,gBAeDC,YAAc,WACb,EAAKH,UAAS,SAAAL,GAAW,MAAO,CAACS,MAAOT,EAAMS,MAAM,OAfpD,EAAKT,MAAQ,CACZS,MAAO,GAHK,E,kEAOQC,EAAWC,GAGhC,OAAIP,KAAKJ,MAAMS,QAAUE,EAAUF,Q,+BAYnC,OADA7B,QAAQC,IAAI,qBAEX,4BAAQ+B,MAAOR,KAAKX,MAAMmB,MAAOC,QAAST,KAAKI,aAA/C,UACSJ,KAAKJ,MAAMS,W,GAzBKH,aCmBbQ,E,uKAXb,OADAlC,QAAQC,IAAI,cAEX,6BACC,wBAAIN,UAAU,MAAd,eACA,kBAAC,EAAD,CAAeqC,MAAO,a,GAVLN,aCyBfS,G,wLAoBJX,KAAKX,MAAMuB,oB,+BAOH,MAImDZ,KAAKX,MAAxDwB,EAJA,EAIAA,YAAaC,EAJb,EAIaA,eAAgBvC,EAJ7B,EAI6BA,OAAQwC,EAJrC,EAIqCA,UACpCC,EAAezC,EAAO0C,QAAO,SAAAtC,GAClC,OAAOA,EAAMV,KAAKiD,cAAcC,SAASN,EAAYK,kBAIzD,OAFA1C,QAAQC,IAAI,aAERsC,EACI,uCAIN,yBAAK5C,UAAU,MAChB,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAWa,aAAc8B,IACzB,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUvC,OAAQyC,W,GAhDLI,IAAMlB,YA2DTmB,eA3ES,SAAAzB,GACvB,MAAO,CACNiB,YAAajB,EAAM0B,aAAaT,YAChCtC,OAAQqB,EAAM2B,cAAchD,OAC5BwC,UAAWnB,EAAM2B,cAAcR,UAC/BjB,MAAOF,EAAM2B,cAAczB,UAIF,SAAC0B,GAC3B,MAAO,CACNV,eAAgB,SAACW,GAAD,OAAWD,EChBW,CACvCvC,KCRkC,sBDSlCyC,QDcoDD,EAAME,OAAOC,SAChEhB,gBAAiB,kBAAMY,GCJU,SAACA,GACnCA,EAAS,CAAEvC,KCnB0B,2BDoBrC4C,MAAM,8CACJC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GAAI,OAAIT,EAAS,CAACvC,KCrBW,yBDqBmByC,QAASO,OAC/DC,OAAO,SAAApC,GAAK,OAAI0B,EAAS,CAAEvC,KCrBO,wBDqBsByC,QAAS5B,cD8DrDuB,CAA6CV,GG3EtDwB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTZ,MAAK,SAAAiB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrD,QACfgD,UAAUC,cAAcO,YAI1B5E,QAAQC,IACN,iHAKEkE,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBvE,QAAQC,IAAI,sCAGRkE,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5Bb,OAAM,SAAApC,GACLtB,QAAQsB,MAAM,4CAA6CA,MCzFjE,IAAMyD,EAAqB,CAC1B1C,YAAa,IAGR2C,EAAqB,CAC1BzC,WAAW,EACXxC,OAAQ,GACRuB,MAAO,ICDF2D,G,MADSC,yBACKC,YAAgB,CAAErC,aDIV,WAA0C,IAAzC1B,EAAwC,uDAAlC2D,EAAoBK,EAAc,uDAAP,GAE7D,OAAQA,EAAO3E,MACd,IFpBiC,sBEqBhC,OAAO4E,OAAOC,OAAO,GAAIlE,EAAO,CAACiB,YAAa+C,EAAOlC,UACtD,QACC,OAAO9B,ICV0C2B,cDcvB,WAA0C,IAAzC3B,EAAwC,uDAAlC4D,EAAoBI,EAAc,uDAAP,GAC9D,OAAQA,EAAO3E,MACd,IF3BoC,yBE4BnC,OAAO4E,OAAOC,OAAO,GAAIlE,EAAO,CAAEmB,WAAW,IAC9C,IF5BoC,yBE6BnC,OAAO8C,OAAOC,OAAO,GAAIlE,EAAO,CAAErB,OAAQqF,EAAOlC,QAASX,WAAW,IACtE,IF7BmC,wBE8BlC,OAAO8C,OAAOC,OAAO,GAAIlE,EAAO,CAAEE,MAAO8D,EAAOlC,QAASX,WAAW,IACrE,QACC,OAAOnB,OCrBJmE,EACLC,YAAYP,EAAaQ,YAAgBC,MAS1CC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,CAAUN,MAAOA,GAChB,kBAAC,EAAD,QAGFO,SAASC,eAAe,SFTnB,SAAkB5B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI4B,IAAIC,eAAwBpC,OAAOC,SAASoC,MACpDC,SAAWtC,OAAOC,SAASqC,OAIvC,OAGFtC,OAAOuC,iBAAiB,QAAQ,WAC9B,IAAMlC,EAAK,UAAM+B,eAAN,sBAEPtC,IAgEV,SAAiCO,EAAOC,GAEtCd,MAAMa,EAAO,CACXmC,QAAS,CAAE,iBAAkB,YAE5B/C,MAAK,SAAAC,GAEJ,IAAM+C,EAAc/C,EAAS8C,QAAQE,IAAI,gBAEnB,MAApBhD,EAASiD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CrC,UAAUC,cAAcqC,MAAMpD,MAAK,SAAAiB,GACjCA,EAAaoC,aAAarD,MAAK,WAC7BO,OAAOC,SAAS8C,eAKpB3C,EAAgBC,EAAOC,MAG1BT,OAAM,WACL1D,QAAQC,IACN,oEAvFA4G,CAAwB3C,EAAOC,GAI/BC,UAAUC,cAAcqC,MAAMpD,MAAK,WACjCtD,QAAQC,IACN,iHAMJgE,EAAgBC,EAAOC,OEb/BE,K","file":"static/js/main.626e7f25.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst Card = ( {id, name, email} ) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n} \n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\n// Two approaches \nconst CardList = ( {robots} ) => {\n  // if (true) {\n  //   throw new Error('NOOOOOOOOO!');\n  // }\n\n  console.log(`CardList ...`)\n  // Approach 1\n  //  Note: if not using => (), then need to return, like this:\n  //   robots.map( (robot, index) => { return ( <Card ... > ) })\n  return (\n  \t<>\n  \t  \t{\n\t  \t    robots.map( (robot, index) => (\n\t\t\t    \t<Card \n\t\t\t    \t\tkey={robot.id} \n\t\t\t    \t\tid={robot.id} \n\t\t\t    \t\tname={robot.name} \n\t\t\t    \t\temail={robot.email}\n\t\t\t    \t/>\n\t  \t    ) )\n  \t\t}\n  \t</>\n  )\n\n  //  Approach 2\n  // const cardsArray = robots.map( (user, i) => {\n  // \treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n  // })\n\n  // return (\n  // \t<>\n  // \t\t{cardsArray}\n  // \t</>\n  // )\n\n} \n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\tconsole.log('SearchBox ...')\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input \n\t\t\t\tclassName=\"pa3 ba\"\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots' \n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\t// return props.children\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError: true});\n\t}\n\n\n\trender() {\n\t\tif (this.state.hasError) {\n\t\t\treturn <h1>Oooops. That is not good.</h1>\n\t\t}\n\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcount: 0\n\t\t}\n\t}\n\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\t// console.log(nextProps, nextState)\n\t\t// return true;\n\t\tif (this.state.count !== nextState.count) {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\n\tupdateCount = () => {\n\t\tthis.setState(state => { return {count: state.count+1} })\n\t}\n\n\trender() {\n\t\tconsole.log('CounterButton ...')\n\t\treturn (\n\t\t\t<button color={this.props.color} onClick={this.updateCount}>\n\t\t\t\tCount: {this.state.count}\n\t\t\t</button>\n\t\t);\n\t}\n\n}\n\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n\t// shouldComponentUpdate(nextProps, nextState) {\n\t// \treturn false;\n\t// }\n\n\trender() {\n\t\tconsole.log('Header ...')\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1 className=\"f2\">RoboFriends</h1>\n\t\t\t\t<CounterButton color={'red'} />\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\n\nexport default Header;","import React from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\n\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends React.Component {\n\t// constructor() {\n\t// \tsuper();\n\t// \tthis.state = {\n\t// \t\trobots: []\n\t// \t\t// searchField: ''\t\t\t\n\t// \t}\n\t// \t// console.log('1: constructor');\n\t// }\n\n\tcomponentDidMount() {\n\t\t// // console.log('App componentDidMount ... ...');\n\t\t// // console.log(this.props.store);\n\t\t// // console.log(this.props.store.getState());\n\t\t// fetch('https://jsonplaceholder.typicode.com/users')\n\t\t// \t.then( response => response.json() )\n\t\t// \t.then( users => \n\t\t// \t\tthis.setState({robots: users}));\n\t\t// \t// console.log('2: didmount');\n\n\t\tthis.props.onRequestRobots();\n\t}\n\n    // onSearchChange = (event) => {\n    // \tthis.setState( {searchField: event.target.value});\n    // }\n\n\trender() {\n\t\t// const { robots, searchField } = this.state;\n\t\t// const { robots } = this.state;\n\t\t// const { searchField, onSearchChange } = this.props;\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n    \tconst filterRobots = robots.filter(robot => {\n    \t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n    \t})\n\t\tconsole.log('3: render');\n\n\t\tif (isPending) {\n\t\t\treturn <h1>Loading</h1>\n\t\t}\n\n\t\treturn (\n\t\t  <div className='tc'>\n\t\t\t<Header />\n\n\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t<Scroll>\n\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t<CardList robots={filterRobots}/>\n\t\t\t\t</ErrorBoundry>\n\t\t\t</Scroll>\n\t\t  </div>\n\t\t);\n\t}\n}\n\n            /* without redux, using this */\n\t\t\t/* <SearchBox searchChange={this.onSearchChange}/> */\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField= (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\n// export const setSearchField= (text) => {\n// \tconsole.log(text);\n// \treturn {\n// \t\ttype: CHANGE_SEARCH_FIELD,\n// \t\tpayload: text\t\t\n// \t}\n// }\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then( response => response.json() )\n\t\t.then( data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data }) )\n\t\t.catch( error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }) )\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\t// console.log(`inside reducer, action.type is: ${action.type}`);\n\tswitch (action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch (action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true})\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false})\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false})\n\t\tdefault:\n\t\t\treturn state;\n\t}\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\n\nconst store = \n\tcreateStore(rootReducer, applyMiddleware(thunkMiddleware));\n\t// createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//   \t<App store={store}/>\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nReactDOM.render(\n  <React.StrictMode>\n  \t<Provider store={store}>\n  \t\t<App  />\n  \t</Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n"],"sourceRoot":""}